/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* buildArray(int* nums, int numsSize, int* returnSize) {
    if (numsSize == 0) return 0;                        // for memory efficiency.
    *returnSize = numsSize;                             // we must add this line for returnSize. Otherwise, the NewArr won't return its value to the main.
    int* ans = (int*)malloc(numsSize * sizeof(int)); 
    if (ans == NULL) return NULL;                       // memory efficiency.  

    for (int i = 0; i < numsSize; i++) {
        ans[i] = nums[nums[i]]; 
    }

    return ans;
}

// This exercise is build a new array base on the values inside the current array. (permutation)
// for example : INPUT  [0][4][6][2][1][5][3]
//               OUTPUT [0][1][3][6][4][5][2]
// Do you see it? that's right, we are using NewArr = nums[nums[i]], put it in the loop to generate i -> numsSize to create a NewArray based on the 'value - position'
// for instance: nums[nums[4]] == nums[1] == 4.
// Have a good day.
